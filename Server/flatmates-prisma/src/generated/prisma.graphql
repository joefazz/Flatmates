# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

type Group implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
}

type Message implements Node {
  id: ID!
  createdAt: DateTime!
  text: String!
  from(where: UserWhereInput): User!
  to(where: GroupWhereInput): Group!
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  createdBy(where: HouseWhereInput): House!
}


#
# Other Types
#

type AggregateFile {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateHouse {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  contentType: String!
  name: String!
  secret: String!
  size: Int!
  url: String!
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  contentType: String
  name: String
  secret: String
  size: Int
  url: String
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  contentType: String
  contentType_not: String
  contentType_in: [String!]
  contentType_not_in: [String!]
  contentType_lt: String
  contentType_lte: String
  contentType_gt: String
  contentType_gte: String
  contentType_contains: String
  contentType_not_contains: String
  contentType_starts_with: String
  contentType_not_starts_with: String
  contentType_ends_with: String
  contentType_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  secret: String
  secret_not: String
  secret_in: [String!]
  secret_not_in: [String!]
  secret_lt: String
  secret_lte: String
  secret_gt: String
  secret_gte: String
  secret_contains: String
  secret_not_contains: String
  secret_starts_with: String
  secret_not_starts_with: String
  secret_ends_with: String
  secret_not_ends_with: String
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
}

input FileWhereUniqueInput {
  id: ID
  secret: String
  url: String
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  name: String!
  users: UserCreateManyWithoutGroupInput
  messages: MessageCreateManyWithoutToInput
}

input GroupCreateManyWithoutUsersInput {
  create: [GroupCreateWithoutUsersInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutMessagesInput {
  create: GroupCreateWithoutMessagesInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutMessagesInput {
  name: String!
  users: UserCreateManyWithoutGroupInput
}

input GroupCreateWithoutUsersInput {
  name: String!
  messages: MessageCreateManyWithoutToInput
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type GroupPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
}

input GroupUpdateInput {
  name: String
  users: UserUpdateManyWithoutGroupInput
  messages: MessageUpdateManyWithoutToInput
}

input GroupUpdateManyWithoutUsersInput {
  create: [GroupCreateWithoutUsersInput!]
  connect: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithoutUsersInput!]
  upsert: [GroupUpsertWithoutUsersInput!]
}

input GroupUpdateOneWithoutMessagesInput {
  create: GroupCreateWithoutMessagesInput
  connect: GroupWhereUniqueInput
  disconnect: GroupWhereUniqueInput
  delete: GroupWhereUniqueInput
  update: GroupUpdateWithoutMessagesInput
  upsert: GroupUpsertWithoutMessagesInput
}

input GroupUpdateWithoutMessagesDataInput {
  name: String
  users: UserUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutMessagesInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutMessagesDataInput!
}

input GroupUpdateWithoutUsersDataInput {
  name: String
  messages: MessageUpdateManyWithoutToInput
}

input GroupUpdateWithoutUsersInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutUsersDataInput!
}

input GroupUpsertWithoutMessagesInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutMessagesDataInput!
  create: GroupCreateWithoutMessagesInput!
}

input GroupUpsertWithoutUsersInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutUsersDataInput!
  create: GroupCreateWithoutUsersInput!
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
}

input GroupWhereUniqueInput {
  id: ID
}

type House {
  shortID: Int!
  road: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  rentPrice: Int!
  billsPrice: Int!
  spaces: Int!
  houseImages: [String!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type HouseConnection {
  pageInfo: PageInfo!
  edges: [HouseEdge]!
  aggregate: AggregateHouse!
}

input HouseCreatehouseImagesInput {
  set: [String!]
}

input HouseCreateInput {
  shortID: Int!
  road: String!
  rentPrice: Int!
  billsPrice: Int!
  spaces: Int!
  houseImages: HouseCreatehouseImagesInput
  posts: PostCreateManyWithoutCreatedByInput
  users: UserCreateManyWithoutHouseInput
}

input HouseCreateOneWithoutPostsInput {
  create: HouseCreateWithoutPostsInput
  connect: HouseWhereUniqueInput
}

input HouseCreateOneWithoutUsersInput {
  create: HouseCreateWithoutUsersInput
  connect: HouseWhereUniqueInput
}

input HouseCreateWithoutPostsInput {
  shortID: Int!
  road: String!
  rentPrice: Int!
  billsPrice: Int!
  spaces: Int!
  houseImages: HouseCreatehouseImagesInput
  users: UserCreateManyWithoutHouseInput
}

input HouseCreateWithoutUsersInput {
  shortID: Int!
  road: String!
  rentPrice: Int!
  billsPrice: Int!
  spaces: Int!
  houseImages: HouseCreatehouseImagesInput
  posts: PostCreateManyWithoutCreatedByInput
}

type HouseEdge {
  node: House!
  cursor: String!
}

enum HouseOrderByInput {
  shortID_ASC
  shortID_DESC
  road_ASC
  road_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  rentPrice_ASC
  rentPrice_DESC
  billsPrice_ASC
  billsPrice_DESC
  spaces_ASC
  spaces_DESC
  id_ASC
  id_DESC
}

type HousePreviousValues {
  shortID: Int!
  road: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  rentPrice: Int!
  billsPrice: Int!
  spaces: Int!
  houseImages: [String!]
}

type HouseSubscriptionPayload {
  mutation: MutationType!
  node: House
  updatedFields: [String!]
  previousValues: HousePreviousValues
}

input HouseSubscriptionWhereInput {
  AND: [HouseSubscriptionWhereInput!]
  OR: [HouseSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HouseWhereInput
}

input HouseUpdatehouseImagesInput {
  set: [String!]
}

input HouseUpdateInput {
  shortID: Int
  road: String
  rentPrice: Int
  billsPrice: Int
  spaces: Int
  houseImages: HouseUpdatehouseImagesInput
  posts: PostUpdateManyWithoutCreatedByInput
  users: UserUpdateManyWithoutHouseInput
}

input HouseUpdateOneWithoutPostsInput {
  create: HouseCreateWithoutPostsInput
  connect: HouseWhereUniqueInput
  disconnect: HouseWhereUniqueInput
  delete: HouseWhereUniqueInput
  update: HouseUpdateWithoutPostsInput
  upsert: HouseUpsertWithoutPostsInput
}

input HouseUpdateOneWithoutUsersInput {
  create: HouseCreateWithoutUsersInput
  connect: HouseWhereUniqueInput
  disconnect: HouseWhereUniqueInput
  delete: HouseWhereUniqueInput
  update: HouseUpdateWithoutUsersInput
  upsert: HouseUpsertWithoutUsersInput
}

input HouseUpdateWithoutPostsDataInput {
  shortID: Int
  road: String
  rentPrice: Int
  billsPrice: Int
  spaces: Int
  houseImages: HouseUpdatehouseImagesInput
  users: UserUpdateManyWithoutHouseInput
}

input HouseUpdateWithoutPostsInput {
  where: HouseWhereUniqueInput!
  data: HouseUpdateWithoutPostsDataInput!
}

input HouseUpdateWithoutUsersDataInput {
  shortID: Int
  road: String
  rentPrice: Int
  billsPrice: Int
  spaces: Int
  houseImages: HouseUpdatehouseImagesInput
  posts: PostUpdateManyWithoutCreatedByInput
}

input HouseUpdateWithoutUsersInput {
  where: HouseWhereUniqueInput!
  data: HouseUpdateWithoutUsersDataInput!
}

input HouseUpsertWithoutPostsInput {
  where: HouseWhereUniqueInput!
  update: HouseUpdateWithoutPostsDataInput!
  create: HouseCreateWithoutPostsInput!
}

input HouseUpsertWithoutUsersInput {
  where: HouseWhereUniqueInput!
  update: HouseUpdateWithoutUsersDataInput!
  create: HouseCreateWithoutUsersInput!
}

input HouseWhereInput {
  AND: [HouseWhereInput!]
  OR: [HouseWhereInput!]
  shortID: Int
  shortID_not: Int
  shortID_in: [Int!]
  shortID_not_in: [Int!]
  shortID_lt: Int
  shortID_lte: Int
  shortID_gt: Int
  shortID_gte: Int
  road: String
  road_not: String
  road_in: [String!]
  road_not_in: [String!]
  road_lt: String
  road_lte: String
  road_gt: String
  road_gte: String
  road_contains: String
  road_not_contains: String
  road_starts_with: String
  road_not_starts_with: String
  road_ends_with: String
  road_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  rentPrice: Int
  rentPrice_not: Int
  rentPrice_in: [Int!]
  rentPrice_not_in: [Int!]
  rentPrice_lt: Int
  rentPrice_lte: Int
  rentPrice_gt: Int
  rentPrice_gte: Int
  billsPrice: Int
  billsPrice_not: Int
  billsPrice_in: [Int!]
  billsPrice_not_in: [Int!]
  billsPrice_lt: Int
  billsPrice_lte: Int
  billsPrice_gt: Int
  billsPrice_gte: Int
  spaces: Int
  spaces_not: Int
  spaces_in: [Int!]
  spaces_not_in: [Int!]
  spaces_lt: Int
  spaces_lte: Int
  spaces_gt: Int
  spaces_gte: Int
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input HouseWhereUniqueInput {
  shortID: Int
}

scalar Long

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  text: String!
  from: UserCreateOneWithoutMessagesInput!
  to: GroupCreateOneWithoutMessagesInput!
}

input MessageCreateManyWithoutFromInput {
  create: [MessageCreateWithoutFromInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutToInput {
  create: [MessageCreateWithoutToInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutFromInput {
  text: String!
  to: GroupCreateOneWithoutMessagesInput!
}

input MessageCreateWithoutToInput {
  text: String!
  from: UserCreateOneWithoutMessagesInput!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

input MessageUpdateInput {
  text: String
  from: UserUpdateOneWithoutMessagesInput
  to: GroupUpdateOneWithoutMessagesInput
}

input MessageUpdateManyWithoutFromInput {
  create: [MessageCreateWithoutFromInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithoutFromInput!]
  upsert: [MessageUpsertWithoutFromInput!]
}

input MessageUpdateManyWithoutToInput {
  create: [MessageCreateWithoutToInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithoutToInput!]
  upsert: [MessageUpsertWithoutToInput!]
}

input MessageUpdateWithoutFromDataInput {
  text: String
  to: GroupUpdateOneWithoutMessagesInput
}

input MessageUpdateWithoutFromInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutFromDataInput!
}

input MessageUpdateWithoutToDataInput {
  text: String
  from: UserUpdateOneWithoutMessagesInput
}

input MessageUpdateWithoutToInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutToDataInput!
}

input MessageUpsertWithoutFromInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutFromDataInput!
  create: MessageCreateWithoutFromInput!
}

input MessageUpsertWithoutToInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutToDataInput!
  create: MessageCreateWithoutToInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  from: UserWhereInput
  to: GroupWhereInput
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createGroup(data: GroupCreateInput!): Group!
  createHouse(data: HouseCreateInput!): House!
  createPost(data: PostCreateInput!): Post!
  createMessage(data: MessageCreateInput!): Message!
  createFile(data: FileCreateInput!): File!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateHouse(data: HouseUpdateInput!, where: HouseWhereUniqueInput!): House
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  deleteUser(where: UserWhereUniqueInput!): User
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteHouse(where: HouseWhereUniqueInput!): House
  deletePost(where: PostWhereUniqueInput!): Post
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteFile(where: FileWhereUniqueInput!): File
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  upsertHouse(where: HouseWhereUniqueInput!, create: HouseCreateInput!, update: HouseUpdateInput!): House!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyGroups(data: GroupUpdateInput!, where: GroupWhereInput!): BatchPayload!
  updateManyHouses(data: HouseUpdateInput!, where: HouseWhereInput!): BatchPayload!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyMessages(data: MessageUpdateInput!, where: MessageWhereInput!): BatchPayload!
  updateManyFiles(data: FileUpdateInput!, where: FileWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyGroups(where: GroupWhereInput!): BatchPayload!
  deleteManyHouses(where: HouseWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyMessages(where: MessageWhereInput!): BatchPayload!
  deleteManyFiles(where: FileWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  title: String!
  description: String!
  createdBy: HouseCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutCreatedByInput {
  create: [PostCreateWithoutCreatedByInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutCreatedByInput {
  title: String!
  description: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  title: String
  description: String
  createdBy: HouseUpdateOneWithoutPostsInput
}

input PostUpdateManyWithoutCreatedByInput {
  create: [PostCreateWithoutCreatedByInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithoutCreatedByInput!]
  upsert: [PostUpsertWithoutCreatedByInput!]
}

input PostUpdateWithoutCreatedByDataInput {
  title: String
  description: String
}

input PostUpdateWithoutCreatedByInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutCreatedByDataInput!
}

input PostUpsertWithoutCreatedByInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutCreatedByDataInput!
  create: PostCreateWithoutCreatedByInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdBy: HouseWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  houses(where: HouseWhereInput, orderBy: HouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [House]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  user(where: UserWhereUniqueInput!): User
  group(where: GroupWhereUniqueInput!): Group
  house(where: HouseWhereUniqueInput!): House
  post(where: PostWhereUniqueInput!): Post
  message(where: MessageWhereUniqueInput!): Message
  file(where: FileWhereUniqueInput!): File
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  housesConnection(where: HouseWhereInput, orderBy: HouseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HouseConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  node(id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  house(where: HouseSubscriptionWhereInput): HouseSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
}

type User {
  facebookUserId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String!
  firstName: String!
  lastName: String!
  birthday: String!
  gender: String!
  bio: String
  course: String
  studyYear: String
  isSmoker: Boolean
  socialScore: Int
  minPrice: Int
  maxPrice: Int
  genderPreference: String
  permissions: [String!]
  group(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  house(where: HouseWhereInput): House
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  imageUrl: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  facebookUserId: String!
  email: String!
  name: String!
  firstName: String!
  lastName: String!
  birthday: String!
  gender: String!
  bio: String
  course: String
  studyYear: String
  isSmoker: Boolean
  socialScore: Int
  minPrice: Int
  maxPrice: Int
  genderPreference: String
  imageUrl: String!
  permissions: UserCreatepermissionsInput
  group: GroupCreateManyWithoutUsersInput
  house: HouseCreateOneWithoutUsersInput
  messages: MessageCreateManyWithoutFromInput
}

input UserCreateManyWithoutGroupInput {
  create: [UserCreateWithoutGroupInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutHouseInput {
  create: [UserCreateWithoutHouseInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [String!]
}

input UserCreateWithoutGroupInput {
  facebookUserId: String!
  email: String!
  name: String!
  firstName: String!
  lastName: String!
  birthday: String!
  gender: String!
  bio: String
  course: String
  studyYear: String
  isSmoker: Boolean
  socialScore: Int
  minPrice: Int
  maxPrice: Int
  genderPreference: String
  imageUrl: String!
  permissions: UserCreatepermissionsInput
  house: HouseCreateOneWithoutUsersInput
  messages: MessageCreateManyWithoutFromInput
}

input UserCreateWithoutHouseInput {
  facebookUserId: String!
  email: String!
  name: String!
  firstName: String!
  lastName: String!
  birthday: String!
  gender: String!
  bio: String
  course: String
  studyYear: String
  isSmoker: Boolean
  socialScore: Int
  minPrice: Int
  maxPrice: Int
  genderPreference: String
  imageUrl: String!
  permissions: UserCreatepermissionsInput
  group: GroupCreateManyWithoutUsersInput
  messages: MessageCreateManyWithoutFromInput
}

input UserCreateWithoutMessagesInput {
  facebookUserId: String!
  email: String!
  name: String!
  firstName: String!
  lastName: String!
  birthday: String!
  gender: String!
  bio: String
  course: String
  studyYear: String
  isSmoker: Boolean
  socialScore: Int
  minPrice: Int
  maxPrice: Int
  genderPreference: String
  imageUrl: String!
  permissions: UserCreatepermissionsInput
  group: GroupCreateManyWithoutUsersInput
  house: HouseCreateOneWithoutUsersInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  facebookUserId_ASC
  facebookUserId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  birthday_ASC
  birthday_DESC
  gender_ASC
  gender_DESC
  bio_ASC
  bio_DESC
  course_ASC
  course_DESC
  studyYear_ASC
  studyYear_DESC
  isSmoker_ASC
  isSmoker_DESC
  socialScore_ASC
  socialScore_DESC
  minPrice_ASC
  minPrice_DESC
  maxPrice_ASC
  maxPrice_DESC
  genderPreference_ASC
  genderPreference_DESC
  imageUrl_ASC
  imageUrl_DESC
  id_ASC
  id_DESC
}

type UserPreviousValues {
  facebookUserId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  name: String!
  firstName: String!
  lastName: String!
  birthday: String!
  gender: String!
  bio: String
  course: String
  studyYear: String
  isSmoker: Boolean
  socialScore: Int
  minPrice: Int
  maxPrice: Int
  genderPreference: String
  permissions: [String!]
  imageUrl: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  facebookUserId: String
  email: String
  name: String
  firstName: String
  lastName: String
  birthday: String
  gender: String
  bio: String
  course: String
  studyYear: String
  isSmoker: Boolean
  socialScore: Int
  minPrice: Int
  maxPrice: Int
  genderPreference: String
  imageUrl: String
  permissions: UserUpdatepermissionsInput
  group: GroupUpdateManyWithoutUsersInput
  house: HouseUpdateOneWithoutUsersInput
  messages: MessageUpdateManyWithoutFromInput
}

input UserUpdateManyWithoutGroupInput {
  create: [UserCreateWithoutGroupInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutGroupInput!]
  upsert: [UserUpsertWithoutGroupInput!]
}

input UserUpdateManyWithoutHouseInput {
  create: [UserCreateWithoutHouseInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutHouseInput!]
  upsert: [UserUpsertWithoutHouseInput!]
}

input UserUpdateOneWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutMessagesInput
  upsert: UserUpsertWithoutMessagesInput
}

input UserUpdatepermissionsInput {
  set: [String!]
}

input UserUpdateWithoutGroupDataInput {
  facebookUserId: String
  email: String
  name: String
  firstName: String
  lastName: String
  birthday: String
  gender: String
  bio: String
  course: String
  studyYear: String
  isSmoker: Boolean
  socialScore: Int
  minPrice: Int
  maxPrice: Int
  genderPreference: String
  imageUrl: String
  permissions: UserUpdatepermissionsInput
  house: HouseUpdateOneWithoutUsersInput
  messages: MessageUpdateManyWithoutFromInput
}

input UserUpdateWithoutGroupInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupDataInput!
}

input UserUpdateWithoutHouseDataInput {
  facebookUserId: String
  email: String
  name: String
  firstName: String
  lastName: String
  birthday: String
  gender: String
  bio: String
  course: String
  studyYear: String
  isSmoker: Boolean
  socialScore: Int
  minPrice: Int
  maxPrice: Int
  genderPreference: String
  imageUrl: String
  permissions: UserUpdatepermissionsInput
  group: GroupUpdateManyWithoutUsersInput
  messages: MessageUpdateManyWithoutFromInput
}

input UserUpdateWithoutHouseInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutHouseDataInput!
}

input UserUpdateWithoutMessagesDataInput {
  facebookUserId: String
  email: String
  name: String
  firstName: String
  lastName: String
  birthday: String
  gender: String
  bio: String
  course: String
  studyYear: String
  isSmoker: Boolean
  socialScore: Int
  minPrice: Int
  maxPrice: Int
  genderPreference: String
  imageUrl: String
  permissions: UserUpdatepermissionsInput
  group: GroupUpdateManyWithoutUsersInput
  house: HouseUpdateOneWithoutUsersInput
}

input UserUpdateWithoutMessagesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutMessagesDataInput!
}

input UserUpsertWithoutGroupInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupDataInput!
  create: UserCreateWithoutGroupInput!
}

input UserUpsertWithoutHouseInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutHouseDataInput!
  create: UserCreateWithoutHouseInput!
}

input UserUpsertWithoutMessagesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutMessagesDataInput!
  create: UserCreateWithoutMessagesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  facebookUserId: String
  facebookUserId_not: String
  facebookUserId_in: [String!]
  facebookUserId_not_in: [String!]
  facebookUserId_lt: String
  facebookUserId_lte: String
  facebookUserId_gt: String
  facebookUserId_gte: String
  facebookUserId_contains: String
  facebookUserId_not_contains: String
  facebookUserId_starts_with: String
  facebookUserId_not_starts_with: String
  facebookUserId_ends_with: String
  facebookUserId_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  birthday: String
  birthday_not: String
  birthday_in: [String!]
  birthday_not_in: [String!]
  birthday_lt: String
  birthday_lte: String
  birthday_gt: String
  birthday_gte: String
  birthday_contains: String
  birthday_not_contains: String
  birthday_starts_with: String
  birthday_not_starts_with: String
  birthday_ends_with: String
  birthday_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  course: String
  course_not: String
  course_in: [String!]
  course_not_in: [String!]
  course_lt: String
  course_lte: String
  course_gt: String
  course_gte: String
  course_contains: String
  course_not_contains: String
  course_starts_with: String
  course_not_starts_with: String
  course_ends_with: String
  course_not_ends_with: String
  studyYear: String
  studyYear_not: String
  studyYear_in: [String!]
  studyYear_not_in: [String!]
  studyYear_lt: String
  studyYear_lte: String
  studyYear_gt: String
  studyYear_gte: String
  studyYear_contains: String
  studyYear_not_contains: String
  studyYear_starts_with: String
  studyYear_not_starts_with: String
  studyYear_ends_with: String
  studyYear_not_ends_with: String
  isSmoker: Boolean
  isSmoker_not: Boolean
  socialScore: Int
  socialScore_not: Int
  socialScore_in: [Int!]
  socialScore_not_in: [Int!]
  socialScore_lt: Int
  socialScore_lte: Int
  socialScore_gt: Int
  socialScore_gte: Int
  minPrice: Int
  minPrice_not: Int
  minPrice_in: [Int!]
  minPrice_not_in: [Int!]
  minPrice_lt: Int
  minPrice_lte: Int
  minPrice_gt: Int
  minPrice_gte: Int
  maxPrice: Int
  maxPrice_not: Int
  maxPrice_in: [Int!]
  maxPrice_not_in: [Int!]
  maxPrice_lt: Int
  maxPrice_lte: Int
  maxPrice_gt: Int
  maxPrice_gte: Int
  genderPreference: String
  genderPreference_not: String
  genderPreference_in: [String!]
  genderPreference_not_in: [String!]
  genderPreference_lt: String
  genderPreference_lte: String
  genderPreference_gt: String
  genderPreference_gte: String
  genderPreference_contains: String
  genderPreference_not_contains: String
  genderPreference_starts_with: String
  genderPreference_not_starts_with: String
  genderPreference_ends_with: String
  genderPreference_not_ends_with: String
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  group_every: GroupWhereInput
  group_some: GroupWhereInput
  group_none: GroupWhereInput
  house: HouseWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
}

input UserWhereUniqueInput {
  facebookUserId: String
}
